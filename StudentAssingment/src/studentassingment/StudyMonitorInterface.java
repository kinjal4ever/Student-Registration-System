package studentassingment;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * 
 */
public class StudyMonitorInterface extends javax.swing.JFrame {

    /**
     * Creates new form StudyMonitorInterface
     */
    DatabaseUtility dbOpration = new DatabaseUtility();
    String query = "";
    Object[] queryParam;
    List<Map<String,Object>> result ;
    boolean displayTitleFlag = true;
    String loadedSubName = "";
    Student student = null;
    
    public StudyMonitorInterface() {
        initComponents();
        cmbSubjects.setModel(new javax.swing.DefaultComboBoxModel(new String[] {"select subject","English","Mathematics B","Biology","Business and Communication Technologies","Religion and Ethics"}));
        
        
        result = dbOpration.select("select degree from grade", null);
        ArrayList<String> achievementArray = new ArrayList<String>();
        achievementArray.add("Select Achievement");
        for(Map<String,Object> row : result){
            achievementArray.add(String.valueOf(row.get("degree")).trim());
        }
        
        cmbAchievement.setModel(new javax.swing.DefaultComboBoxModel(achievementArray.toArray()));
        cmbAssessment.setModel(new javax.swing.DefaultComboBoxModel(new String[] {}));
        
        btnSetGrade.setEnabled(false);
        btnLoadAssissment.setEnabled(false);
        btnSave.setEnabled(false);
        btnCreateStudent.setEnabled(false);
        btnDisplayAssissment.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtStudentName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtYearLevel = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        cmbSubjects = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        cmbAssessment = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbAchievement = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txtPassword = new javax.swing.JPasswordField();
        btnLogin = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnCreateStudent = new javax.swing.JButton();
        btnLoadAssissment = new javax.swing.JButton();
        btnDisplayAssissment = new javax.swing.JButton();
        btnSetGrade = new javax.swing.JButton();
        btnDisplayGrade = new javax.swing.JButton();
        btnClearDisplay = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Study progress monitor");
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Study Progress Monitor"));

        jLabel1.setText("Student Name");

        txtStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtStudentNameActionPerformed(evt);
            }
        });

        jLabel2.setText("Year Level");

        jLabel3.setText("Subject");

        cmbSubjects.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel4.setText("Assessment");

        cmbAssessment.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbAssessment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAssessmentActionPerformed(evt);
            }
        });

        jLabel5.setText("Achievement");

        cmbAchievement.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel6.setText("Username:");

        jLabel7.setText("Password:");

        btnLogin.setText("Login");
        btnLogin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoginActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnLogin)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 15, Short.MAX_VALUE)
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtYearLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(77, 77, 77))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbSubjects, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbAssessment, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(cmbAchievement, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(80, 80, 80))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnLogin))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtYearLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(cmbSubjects, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4)
                            .addComponent(cmbAssessment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbAchievement, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel5)))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Student Perfomance"));

        txtDisplay.setEditable(false);
        txtDisplay.setColumns(20);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Command Buttons"));

        btnCreateStudent.setText("Create Student");
        btnCreateStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateStudentActionPerformed(evt);
            }
        });

        btnLoadAssissment.setLabel("Load Assessment");
        btnLoadAssissment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadAssissmentActionPerformed(evt);
            }
        });

        btnDisplayAssissment.setLabel("Display Assessment");
        btnDisplayAssissment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayAssissmentActionPerformed(evt);
            }
        });

        btnSetGrade.setText("Set Grade");
        btnSetGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSetGradeActionPerformed(evt);
            }
        });

        btnDisplayGrade.setText("Display Grade");
        btnDisplayGrade.setToolTipText("");
        btnDisplayGrade.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDisplayGradeActionPerformed(evt);
            }
        });

        btnClearDisplay.setText("Clear Display");
        btnClearDisplay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearDisplayActionPerformed(evt);
            }
        });

        btnExit.setLabel("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addComponent(btnCreateStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(btnLoadAssissment, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                .addGap(2, 2, 2)
                .addComponent(btnDisplayAssissment, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSetGrade, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDisplayGrade, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnClearDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateStudent, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLoadAssissment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDisplayAssissment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSetGrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDisplayGrade, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnClearDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave))
                .addGap(9, 9, 9))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbAssessmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAssessmentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbAssessmentActionPerformed

    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        dbOpration.closeConnecction();
        System.exit(0);
    }//GEN-LAST:event_btnExitActionPerformed

    private void txtStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtStudentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtStudentNameActionPerformed

    private void addDisplayText(String strText){
        txtDisplay.setText(txtDisplay.getText() + "\n" + strText);
    }
    private void btnCreateStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateStudentActionPerformed
        // TODO add your handling code here:
        if(displayTitleFlag){
           addDisplayText("Student added to the system. you can load Assessment using Load Assessment Button.");
           addDisplayText("****List of added students*****");
           displayTitleFlag = false;
        }
        
        try{
        String studentName = txtStudentName.getText().trim();
        String yearLevel = txtYearLevel.getText().trim();
        if("".equals(studentName) || null == studentName){
            JOptionPane.showMessageDialog(this, "Enter Student Name");
        }else if("".equals(yearLevel) || null == yearLevel){
            JOptionPane.showMessageDialog(this, "Enter Student Year Level");
        }else{
                int year  = 0;
                try{
                    year  = Integer.parseInt(yearLevel);
                }catch(NumberFormatException ee){
                   JOptionPane.showMessageDialog(this, "Year level must be number");
                }
                
//             query = "insert into student(name,year_level)values(?,?)";
//             Object[] queryParam = new Object[2];
//             queryParam[0] = studentName;
//             queryParam[1] = year;
//             int responseCode = dbOpration.insert(query, queryParam);
//             
//             
//             query = "select max(id) as id from student";
//             result = dbOpration.select(query, null);
//             int insertedId = Integer.parseInt(String.valueOf(result.get(0).get("id")));
//             query = "insert into subject(name,student_id) values(?,?)";
//             queryParam = new Object[2];
//             queryParam[0] = "English";
//             queryParam[1] = insertedId;
//             
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Mathematics B";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Biology";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Business and Communication Technologies";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Religion and Ethics";
//             dbOpration.insert(query, queryParam);
             
                
              student = new Student();
              student.setName(studentName);
              student.setYearLevel(yearLevel);
              
              ArrayList<Subject> subjectArrays = new ArrayList<Subject>();
              
              Subject subject = new Subject();
              subject.setName("English");
              subjectArrays.add(subject);
              
              subject = new Subject();
              subject.setName("Mathematics B");
              subjectArrays.add(subject);
              
              subject = new Subject();
              subject.setName("Biology");
              subjectArrays.add(subject);
              
              subject = new Subject();
              subject.setName("Business and Communication Technologies");
              subjectArrays.add(subject);
              
              subject = new Subject();
              subject.setName("Religion and Ethics");
              subjectArrays.add(subject);
              
              student.setSubjects(subjectArrays);
              
             addDisplayText(studentName + " " + yearLevel);
             addDisplayText("English, Mathematics B, Biology, Business and Communication Technologies, Religion and Ethics");
             
             //JOptionPane.showMessageDialog(this,responseCode);
             
            btnSetGrade.setEnabled(true);
            btnLoadAssissment.setEnabled(true);
            btnSave.setEnabled(true);
             
        }
        }catch(Exception ee){
            System.out.println("Error" + ee.getMessage());
            ee.printStackTrace();
        }
        
    }//GEN-LAST:event_btnCreateStudentActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        dbOpration.closeConnecction();
    }//GEN-LAST:event_formWindowClosing

    private void btnLoadAssissmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadAssissmentActionPerformed
        // TODO add your handling code here:
        try{
//            String strStudentName = txtStudentName.getText().trim();
//            if("".equals(strStudentName) || null == strStudentName){
//                JOptionPane.showMessageDialog(this, "Enter Name");
//                return;
//            }
            
            Map<String,String[]> assessment = new HashMap<String,String[]>();
            String[] assessmentDetail = new String[]{"Select Assessment","Multimedai presentation","Assigment","Exam"};
            assessment.put("English", assessmentDetail);
            assessment.put("Mathematics B", assessmentDetail);
            assessment.put("Biology", assessmentDetail);
            assessment.put("Business and Communication Technologies", assessmentDetail);
            assessment.put("Religion and Ethics", assessmentDetail);
            
//            if(cmbSubjects.getSelectedIndex() == 0)
//            {
//                JOptionPane.showMessageDialog(this, "Select Subject");
//                return;
//            }
            cmbAssessment.setModel(new javax.swing.DefaultComboBoxModel(assessmentDetail));
            loadedSubName = cmbSubjects.getSelectedItem().toString();
        }
        catch(Exception ee){
            System.out.println("Error :" + ee.toString());
            ee.printStackTrace();
        }
    }//GEN-LAST:event_btnLoadAssissmentActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        
        if(cmbSubjects.getSelectedIndex() < 0){
            JOptionPane.showMessageDialog(this, "First Load Assissment");
            return;
        }
        
        if("".equals(txtStudentName.getText().trim())){
            JOptionPane.showMessageDialog(this, "Enter student name");
            return;
        }
        
        
        query = "insert into student(name,year_level)values(?,?)";
        Object[] queryParam = new Object[2];
        queryParam[0] = student.getName();
        queryParam[1] = student.getYearLevel();
        int responseCode = dbOpration.insert(query, queryParam);
             
             query = "select max(id) as id from student";
             result = dbOpration.select(query, null);
             int insertedId = Integer.parseInt(String.valueOf(result.get(0).get("id")));
             query = "insert into subject(name,student_id) values(?,?)";
             queryParam = new Object[2];
             queryParam[1] = insertedId;
             
             for(Subject s : student.getSubjects()){
                 queryParam[0] = s.getName();
             dbOpration.insert(query, queryParam);
             }
             
//             queryParam[0] = "Mathematics B";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Biology";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Business and Communication Technologies";
//             dbOpration.insert(query, queryParam);
//             
//             queryParam[0] = "Religion and Ethics";
//             dbOpration.insert(query, queryParam);
        
        
        
        
        
        //loadedSubName = "";
        int resultCode = 0;
        //"Multimedai presentation","Assignment","exam"
        
        query = "select max(id) as id from student where name like '%" + txtStudentName.getText()+"%'";
        result = dbOpration.select(query, null);
        int studentId  = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        
        query = " select id from subject where student_id = "
                + "(select max(id) from student where name like '%" + txtStudentName.getText()+"%')";
        
        result = dbOpration.select(query, null);
        
        for(Map<String,Object> row : result){
        int subjectId = Integer.parseInt(String.valueOf(row.get("id")));
        query = "insert into assessment values(?,?,?,?,?,?,?)";
        queryParam = new Object[7];
        queryParam[0] = 1;
        queryParam[1] = "Multimedai presentation";
        queryParam[2] = "interior monologue 3-4 mins Australian Identity";
        queryParam[3] = "speaking";
        queryParam[4] = 0;
        queryParam[5] = subjectId;
        queryParam[6] = "Wed 9 - Wed 16 March 2017";
        resultCode =  dbOpration.insert(query, queryParam);
        
        if(resultCode == 1)
        {
            queryParam[0] = 2;
            queryParam[1] = "Assigment";
            queryParam[2] = "film study Australia and Australian";
            queryParam[3] = "writing";
            queryParam[6] = "Mon 10-May 2017";
            resultCode =  dbOpration.insert(query, queryParam);
        }
        
        if(resultCode == 1){
            queryParam[0] = 3;
            queryParam[1] = "Exam";
            queryParam[2] = "essay on the novel 90 min";
            queryParam[3] = "writing";
            queryParam[6] = "Mon 10-Fri 14 May 2017";
            dbOpration.insert(query, queryParam);
        }
        }
        JOptionPane.showMessageDialog(this, "Assessment save");
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDisplayAssissmentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayAssissmentActionPerformed
        // TODO add your handling code here:
        if(cmbSubjects.getSelectedIndex() < 1 ){
            JOptionPane.showMessageDialog(this, "Select Subject");
            return;
        }
        if("".equals(txtStudentName.getText().trim())){
            JOptionPane.showMessageDialog(this, "Enter student name");
            return;
        }
        query = " select id from subject where name like '" + cmbSubjects.getSelectedItem().toString()+"' and student_id = "
                + "(select max(id) from student where name like '" + txtStudentName.getText()+"');";
        
        result = dbOpration.select(query, null);
        int subjectId = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        query = "select year_level from student where id = (select max(student_id) from subject where id=?)";
        queryParam = new Object[1];
        queryParam[0] = subjectId;
        
        result = dbOpration.select(query, queryParam);
        String yearLevel = String.valueOf(result.get(0).get("year_level"));
        
        query  = "select * from assessment where subject_id=?";
        
        result = dbOpration.select(query, queryParam);
        
        txtDisplay.setText("");
        for(Map<String,Object> row : result){
            String id = String.valueOf(row.get("id"));
            String type = String.valueOf(row.get("type"));
            String topic = String.valueOf(row.get("topic"));
            String format = String.valueOf(row.get("format"));
            String dueDate = String.valueOf(row.get("dueDate"));
            
            addDisplayText("" + yearLevel + "." + id + "\t"+type + "\t" + topic + "\t" + format + "\t"+ dueDate);
        }
         
    }//GEN-LAST:event_btnDisplayAssissmentActionPerformed

    private void btnSetGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSetGradeActionPerformed
        // TODO add your handling code here:
        if(cmbSubjects.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Select Subject");
            return;
        }
        if("".equals(txtStudentName.getText().trim())){
            JOptionPane.showMessageDialog(this, "Enter Stuent Name");
            return;
        }
        if(cmbAchievement.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Select Achievement");
            return;
        }
        if(cmbAssessment.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Select Assessment");
        }
         
        int student_id;
        int subject_id;
        int assessment_id;
        int grade_id;
        
        
        query = "select max(id) as id from student where name like '%" + txtStudentName.getText().trim() + "%'";
        result = dbOpration.select(query, null);
        student_id = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        query = "select max(id) as id from subject where name like '%" + cmbSubjects.getSelectedItem().toString() + "%'";
        result = dbOpration.select(query, null);
        subject_id = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        query = "select max(id) as id from assessment where type like '%" + cmbAssessment.getSelectedItem().toString() + "%'";
        result = dbOpration.select(query, null);
        assessment_id = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        query = "select max(id) as id from grade where degree like '%" + cmbAchievement.getSelectedItem().toString() + "%'";
        result = dbOpration.select(query, null);
        grade_id = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        
        query = "insert into student_grade values(?,?,?,?)";
        queryParam = new Object[4];
        queryParam[0] = student_id;
        queryParam[1] = subject_id;
        queryParam[2] = assessment_id;
        queryParam[3] = grade_id;
        
        if(dbOpration.insert(query, queryParam) == 0)
            JOptionPane.showMessageDialog(this, "Data not save. Something goes wrong");
        else
            JOptionPane.showMessageDialog(this, "Grade set");
        
        query = "update assessment set grade = ? where id=? and subject_id=?";
        queryParam = new Object[3];
        queryParam[0] = 1;
        queryParam[1] = assessment_id;
        queryParam[2] = subject_id;
        
        dbOpration.update(query, queryParam);
    }//GEN-LAST:event_btnSetGradeActionPerformed

    private void btnDisplayGradeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDisplayGradeActionPerformed
        if("".equals(txtStudentName.getText().trim())){
            JOptionPane.showMessageDialog(this, "Enetr name");
            return;
        }
        query = "select max(id) as id from student where name like '%" + txtStudentName.getText().trim() + "%'";
        result = dbOpration.select(query, null);
        int student_id = Integer.parseInt(String.valueOf(result.get(0).get("id")));
        
        ArrayList<Map<String,String>> subjectIds = new ArrayList<Map<String,String>>();
        
        query = "select id,name from subject where student_id =?";
        queryParam = new Object[1];
        queryParam[0] = student_id;
        result = dbOpration.select(query, queryParam);
        
        for(Map<String,Object> rw : result)
        {
            Map<String,String> subjectDetail = new HashMap<String,String>();
            subjectDetail.put("id", String.valueOf(rw.get("id")));
            subjectDetail.put("name", String.valueOf(rw.get("name")));
            subjectIds.add(subjectDetail);
        }
        
        txtDisplay.setText("");
        for(Map<String,String> rw : subjectIds){
            query = "select * from assessment where subject_id = ? and grade = ?";
            queryParam = new Object[2];
            queryParam[0] = rw.get("id");
            queryParam[1] = 1;
            
            result = dbOpration.select(query, queryParam);
            
            for(Map<String,Object> r : result){
                addDisplayText(rw.get("name") + " " + String.valueOf(r.get("type")) + ", " + 
                        String.valueOf(r.get("topic")) + ", " + String.valueOf(r.get("format")));
                
                List<Map<String,Object>> rstl = dbOpration.select("select * from grade where id = ("
                     + "select grade_id from student_grade where student_id=" +student_id +" and subject_id=" 
                     +rw.get("id") +" and assessment_id=" +String.valueOf(r.get("id")) +")", null);
                
                addDisplayText("Degree:" + rstl.get(0).get("degree"));
                addDisplayText("Knowledge:" + rstl.get(0).get("knowledge"));
                addDisplayText("Skill:" + rstl.get(0).get("skill"));
                
            } 
            addDisplayText("\n");
            
      }
    }//GEN-LAST:event_btnDisplayGradeActionPerformed

    private void btnClearDisplayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearDisplayActionPerformed
        // TODO add your handling code here:
        txtDisplay.setText("");
    }//GEN-LAST:event_btnClearDisplayActionPerformed

    private void btnLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoginActionPerformed
        // TODO add your handling code here:
        if("admin".equals(txtUsername.getText().trim()) && "admin".equals(txtPassword.getText().trim()))
        {
            btnCreateStudent.setEnabled(true);
            btnDisplayAssissment.setEnabled(true);
            return;
        }
        JOptionPane.showMessageDialog(this, "Enter valid username and password");
    }//GEN-LAST:event_btnLoginActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudyMonitorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudyMonitorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudyMonitorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudyMonitorInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudyMonitorInterface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearDisplay;
    private javax.swing.JButton btnCreateStudent;
    private javax.swing.JButton btnDisplayAssissment;
    private javax.swing.JButton btnDisplayGrade;
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnLoadAssissment;
    private javax.swing.JButton btnLogin;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSetGrade;
    private javax.swing.JComboBox cmbAchievement;
    private javax.swing.JComboBox cmbAssessment;
    private javax.swing.JComboBox cmbSubjects;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea txtDisplay;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JTextField txtStudentName;
    private javax.swing.JTextField txtUsername;
    private javax.swing.JTextField txtYearLevel;
    // End of variables declaration//GEN-END:variables
}
